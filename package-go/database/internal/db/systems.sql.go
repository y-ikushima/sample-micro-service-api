// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: systems.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSystem = `-- name: CreateSystem :one
INSERT INTO public.system ("systemName", "localGovernmentId", "mailAddress", telephone, remark)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
          "mailAddress", telephone, remark
`

type CreateSystemParams struct {
	SystemName        string         `json:"systemName"`
	LocalGovernmentId sql.NullString `json:"localGovernmentId"`
	MailAddress       string         `json:"mailAddress"`
	Telephone         sql.NullString `json:"telephone"`
	Remark            sql.NullString `json:"remark"`
}

func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (System, error) {
	row := q.db.QueryRowContext(ctx, createSystem,
		arg.SystemName,
		arg.LocalGovernmentId,
		arg.MailAddress,
		arg.Telephone,
		arg.Remark,
	)
	var i System
	err := row.Scan(
		&i.ID,
		&i.SystemName,
		&i.LocalGovernmentId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MailAddress,
		&i.Telephone,
		&i.Remark,
	)
	return i, err
}

const deleteSystem = `-- name: DeleteSystem :exec
DELETE FROM public.system
WHERE id = $1
`

func (q *Queries) DeleteSystem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSystem, id)
	return err
}

const getSystem = `-- name: GetSystem :one
SELECT id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
       "mailAddress", telephone, remark
FROM public.system
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSystem(ctx context.Context, id uuid.UUID) (System, error) {
	row := q.db.QueryRowContext(ctx, getSystem, id)
	var i System
	err := row.Scan(
		&i.ID,
		&i.SystemName,
		&i.LocalGovernmentId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MailAddress,
		&i.Telephone,
		&i.Remark,
	)
	return i, err
}

const getSystemByName = `-- name: GetSystemByName :one
SELECT id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
       "mailAddress", telephone, remark
FROM public.system
WHERE "systemName" = $1 LIMIT 1
`

func (q *Queries) GetSystemByName(ctx context.Context, systemname string) (System, error) {
	row := q.db.QueryRowContext(ctx, getSystemByName, systemname)
	var i System
	err := row.Scan(
		&i.ID,
		&i.SystemName,
		&i.LocalGovernmentId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MailAddress,
		&i.Telephone,
		&i.Remark,
	)
	return i, err
}

const getSystems = `-- name: GetSystems :many
SELECT id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
       "mailAddress", telephone, remark
FROM public.system
ORDER BY "createdAt" DESC
`

func (q *Queries) GetSystems(ctx context.Context) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, getSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.ID,
			&i.SystemName,
			&i.LocalGovernmentId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MailAddress,
			&i.Telephone,
			&i.Remark,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemsByEmail = `-- name: GetSystemsByEmail :many
SELECT id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
       "mailAddress", telephone, remark
FROM public.system
WHERE "mailAddress" = $1
ORDER BY "createdAt" DESC
`

func (q *Queries) GetSystemsByEmail(ctx context.Context, mailaddress string) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, getSystemsByEmail, mailaddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.ID,
			&i.SystemName,
			&i.LocalGovernmentId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MailAddress,
			&i.Telephone,
			&i.Remark,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemsByLocalGovernment = `-- name: GetSystemsByLocalGovernment :many
SELECT id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
       "mailAddress", telephone, remark
FROM public.system
WHERE "localGovernmentId" = $1
ORDER BY "createdAt" DESC
`

func (q *Queries) GetSystemsByLocalGovernment(ctx context.Context, localgovernmentid sql.NullString) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, getSystemsByLocalGovernment, localgovernmentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.ID,
			&i.SystemName,
			&i.LocalGovernmentId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MailAddress,
			&i.Telephone,
			&i.Remark,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystem = `-- name: UpdateSystem :one
UPDATE public.system
SET "systemName" = $2, "localGovernmentId" = $3, "mailAddress" = $4, 
    telephone = $5, remark = $6, "updatedAt" = now()
WHERE id = $1
RETURNING id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
          "mailAddress", telephone, remark
`

type UpdateSystemParams struct {
	ID                uuid.UUID      `json:"id"`
	SystemName        string         `json:"systemName"`
	LocalGovernmentId sql.NullString `json:"localGovernmentId"`
	MailAddress       string         `json:"mailAddress"`
	Telephone         sql.NullString `json:"telephone"`
	Remark            sql.NullString `json:"remark"`
}

func (q *Queries) UpdateSystem(ctx context.Context, arg UpdateSystemParams) (System, error) {
	row := q.db.QueryRowContext(ctx, updateSystem,
		arg.ID,
		arg.SystemName,
		arg.LocalGovernmentId,
		arg.MailAddress,
		arg.Telephone,
		arg.Remark,
	)
	var i System
	err := row.Scan(
		&i.ID,
		&i.SystemName,
		&i.LocalGovernmentId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MailAddress,
		&i.Telephone,
		&i.Remark,
	)
	return i, err
}

const updateSystemContact = `-- name: UpdateSystemContact :one
UPDATE public.system
SET "mailAddress" = $2, telephone = $3, "updatedAt" = now()
WHERE id = $1
RETURNING id, "systemName", "localGovernmentId", "createdAt", "updatedAt", 
          "mailAddress", telephone, remark
`

type UpdateSystemContactParams struct {
	ID          uuid.UUID      `json:"id"`
	MailAddress string         `json:"mailAddress"`
	Telephone   sql.NullString `json:"telephone"`
}

func (q *Queries) UpdateSystemContact(ctx context.Context, arg UpdateSystemContactParams) (System, error) {
	row := q.db.QueryRowContext(ctx, updateSystemContact, arg.ID, arg.MailAddress, arg.Telephone)
	var i System
	err := row.Scan(
		&i.ID,
		&i.SystemName,
		&i.LocalGovernmentId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MailAddress,
		&i.Telephone,
		&i.Remark,
	)
	return i, err
}
