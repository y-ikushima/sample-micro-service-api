// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"sample-micro-service-api/apps/backend/app-service/internal"
	"sample-micro-service-api/apps/backend/app-service/internal/handler/systems"
	"sample-micro-service-api/apps/backend/app-service/internal/service/systems"
	"sample-micro-service-api/package-go/database"
)

// Injectors from wire.go:

// InitializeApp は Wire によって自動生成される関数
func InitializeApp() (*internal.Server, func(), error) {
	client, cleanup, err := ProvideDatabaseClient()
	if err != nil {
		return nil, nil, err
	}
	serviceInterface := systems_service.NewService(client)
	handler := systems_handler.NewHandler(serviceInterface)
	server := internal.NewServer(client, handler)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

// ProvideDatabaseClient は database.NewClient をラップしてクリーンアップ機能を提供
func ProvideDatabaseClient() (*database.Client, func(), error) {
	client, err := database.NewClient()
	if err != nil {
		return nil, nil, err
	}

	cleanup := func() {
		client.Close()
	}

	return client, cleanup, nil
}

// Providers
var DatabaseSet = wire.NewSet(
	ProvideDatabaseClient,
)

var ServiceSet = wire.NewSet(systems_service.NewService)

var HandlerSet = wire.NewSet(systems_handler.NewHandler)

var ServerSet = wire.NewSet(internal.NewServer)

// Wire everything together
var AppSet = wire.NewSet(
	DatabaseSet,
	ServiceSet,
	HandlerSet,
	ServerSet,
)
